'use client';

import { Geist, Geist_Mono } from 'next/font/google';
import { usePathname } from 'next/navigation';
import React, { useState } from 'react';

import Header from '@/components/layout/Header';
import Sidebar from '@/components/layout/Sidebar';
import Footer from '@/components/layout/Footer';
import { QueryProvider } from './providers/QueryProvider';
import { AuthProvider } from '@/context/AuthContext';

import './globals.css';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

// Metadata can't be exported from a client component.
// We'll keep it here, but Next.js will likely ignore it.
// For dynamic metadata in client components, we'd use the `useMetadata` hook if it existed,
// or manage the title via other means. For now, we leave this as a reference.
// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const pathname = usePathname();
  const [isSidebarCollapsed, setSidebarCollapsed] = useState(false);

  const toggleSidebar = () => {
    setSidebarCollapsed((prev) => !prev);
  };

  // Define routes that should not have the main dashboard layout
  const noLayoutRoutes = ['/login', '/register'];
  const showLayout = !noLayoutRoutes.includes(pathname);

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <QueryProvider>
          <AuthProvider>
            {showLayout ? (
              <div className="flex h-screen bg-gray-100 dark:bg-gray-900">
                <Sidebar isCollapsed={isSidebarCollapsed} />
                <div className="flex flex-1 flex-col overflow-hidden">
                  <Header toggleSidebar={toggleSidebar} />
                  <main className="flex-1 overflow-y-auto p-4 md:p-6">
                    {children}
                  </main>
                  <Footer />
                </div>
              </div>
            ) : (
              children
            )}
          </AuthProvider>
        </QueryProvider>
      </body>
    </html>
  );
}